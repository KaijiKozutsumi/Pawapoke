---
alwaysApply: true
---
まずこのルールを必ず参照し、「参照しマスタ」と宣言しなさい

2. タスクの実行
   - 特定したステップを一つずつ実行してください。
   - 各ステップの完了後、簡潔に進捗を報告してください。
   - 実装時は以下の点に注意してください：
     - 適切なディレクトリ構造の遵守
     - 命名規則の一貫性維持
     - 共通処理の適切な配置

---

3. 品質管理と問題対応
   - 各タスクの実行結果を迅速に検証してください。
   - エラーや不整合が発生した場合は、以下のプロセスで対応してください：
     a. 問題の切り分けと原因特定（ログ分析、デバッグ情報の確認）
     b. 対策案の作成と実施
     c. 修正後の動作検証
     d. デバッグログの確認と分析
   
   - 検証結果は以下の形式で記録してください：
     a. 検証項目と期待される結果
     b. 実際の結果と差異
     c. 必要な対応策（該当する場合）

---

4. 最終確認
   - すべてのタスクが完了したら、成果物全体を評価してください。
   - 当初の指示内容との整合性を確認し、必要に応じて調整を行ってください。
   - 実装した機能に重複がないことを最終確認してください。



---

5. 結果報告
   以下のフォーマットで最終的な結果を報告してください：
   ```markdown
   # 実行結果報告

   ## 概要
   [全体の要約を簡潔に記述]

   ## 実行ステップ
   1. [ステップ1の説明と結果]
   2. [ステップ2の説明と結果]
   ...

   ## 最終成果物
   [成果物の詳細や、該当する場合はリンクなど]

   ## 課題対応（該当する場合）
   - 発生した問題と対応内容
   - 今後の注意点

   ## 注意点・改善提案
   - [気づいた点や改善提案があれば記述]
   ```

---

## 重要な注意事項

- 不明点がある場合は、作業開始前に必ず確認を取ってください。
- 重要な判断が必要な場合は、その都度報告し、承認を得てください。
- 予期せぬ問題が発生した場合は、即座に報告し、対応策を提案してください。
- **明示的に指示されていない変更は行わないでください。** 必要と思われる変更がある場合は、まず提案として報告し、承認を得てから実施してください。
- **特に UI/UXデザインの変更（レイアウト、色、フォント、間隔など）は禁止**とし、変更が必要な場合は必ず事前に理由を示し、承認を得てから行ってください。
- **技術スタックに記載のバージョン（APIやフレームワーク、ライブラリ等）を勝手に変更しないでください。** 変更が必要な場合は、その理由を明確にして承認を得るまでは変更を行わないでください。
- **すべてのnpm runコマンドとGit操作は完全に自動化し、手動操作を一切不要にしてください。** あらゆるコマンドで手作業を発生させず、自動化スクリプトを使用してください。
- **GitコマンドやPowerShellに問題がある場合は、`npm run git:force`を使用して回避してください。**

---

# 技術スタック

@technologystack.md

---

# ディレクトリ構成

@directorystructure.md

以上の指示に従い、確実で質の高い実装を行います。指示された範囲内でのみ処理を行い、不要な追加実装は行いません。不明点や重要な判断が必要な場合は、必ず確認を取ります。

以上の指示に従い、確実で質の高い実装を行います。指示された範囲内でのみ処理を行い、不要な追加実装は行いません。不明点や重要な判断が必要な場合は、必ず確認を取ります。
@directorystructure.md

以上の指示に従い、確実で質の高い実装を行います。指示された範囲内でのみ処理を行い、不要な追加実装は行いません。不明点や重要な判断が必要な場合は、必ず確認を取ります。

以上の指示に従い、確実で質の高い実装を行います。指示された範囲内でのみ処理を行い、不要な追加実装は行いません。不明点や重要な判断が必要な場合は、必ず確認を取ります。
@directorystructure.md

以上の指示に従い、確実で質の高い実装を行います。指示された範囲内でのみ処理を行い、不要な追加実装は行いません。不明点や重要な判断が必要な場合は、必ず確認を取ります。

## デプロイエラー完全防止ルール
**金輪際デプロイエラーを起こさないための厳格な基準：**

### デプロイ前必須チェック
- **依存関係チェック**: すべての依存関係がpackage.jsonに正しく記載されている
- **ビルドテスト**: ローカルで`npm run build`が100%成功することを確認
- **型チェック**: TypeScriptの型エラーが一切ないことを確認
- **リンター確認**: ESLintエラーが一切ないことを確認
- **テスト実行**: すべてのテストが成功することを確認

### 依存関係管理（最重視）
- **明示的インストール**: 使用するライブラリは必ず`npm install`で明示的にインストール
- **バージョン固定**: package.jsonでバージョンを固定（^や~を使用しない）
- **devDependencies**: ビルドに必要なパッケージはdevDependenciesに配置
- **peerDependencies**: 必要なpeerDependenciesを明示的に記載

### ビルド設定の完全性
- **ビルドスクリプト**: package.jsonのbuildスクリプトが確実に動作する
- **環境変数**: 必要な環境変数がすべて設定されている
- **ファイルパス**: 相対パスが正しく設定されている
- **インポート文**: すべてのインポートが正しく解決される

### Netlify特化対策
- **Node.jsバージョン**: .nvmrcでNode.jsバージョンを明示的に指定
- **ビルドコマンド**: netlify.tomlでビルドコマンドを明示的に指定
- **環境設定**: NPM_CONFIG_PRODUCTION=falseでdevDependenciesを確実にインストール
- **キャッシュ対策**: ビルドキャッシュをクリアしてからデプロイ

### エラー防止チェックリスト
- [ ] 新規追加したライブラリがpackage.jsonに記載されている
- [ ] ローカルでnpm run buildが成功する
- [ ] TypeScriptの型エラーが0件
- [ ] ESLintエラーが0件
- [ ] すべてのインポートが正しく解決される
- [ ] 環境変数が適切に設定されている
- [ ] ファイルパスが正しく設定されている
- [ ] ビルドスクリプトが確実に動作する
- [ ] 依存関係の競合がない
- [ ] メモリ不足エラーが発生しない

### デプロイ前最終確認
- **強制ビルドテスト**: `npm ci && npm run build`で完全クリーンビルド
- **依存関係確認**: `npm ls`で依存関係の競合がないことを確認
- **ファイルサイズ確認**: ビルドファイルが適切なサイズであることを確認
- **エラーログ確認**: ビルドログにエラーや警告がないことを確認

### 緊急時対応
- **ロールバック準備**: 前回の正常なコミットを記録
- **段階的デプロイ**: 大きな変更は段階的にデプロイ
- **監視体制**: デプロイ後の動作を即座に確認
- **自動復旧**: デプロイ失敗時の自動ロールバック機能

### 品質保証
- **100%成功保証**: デプロイは必ず100%成功する
- **エラーゼロ**: デプロイエラーは一切発生しない
- **安定性確保**: 本番環境での安定動作を保証
- **継続的改善**: デプロイプロセスの継続的改善